<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/transitional.dtd">
<html>
<head>

  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Source file /src/pkg/asn1/asn1_test.go</title>

  <link rel="stylesheet" type="text/css" href="../../../doc/style.css">
  <script type="text/javascript" src="../../../doc/godocs.js"></script>

</head>

<body>

  <script>
    // Catch 'enter' key down events and trigger the search form submission.
    function codesearchKeyDown(event) {
      if (event.which == 13) {
        var form = document.getElementById('codesearch');
        var query = document.getElementById('codesearchQuery');
        form.q.value = "lang:go package:go.googlecode.com " + query.value;
        document.getElementById('codesearch').submit();
}      return true;
}
    // Capture the submission event and construct the query parameter.
    function codeSearchSubmit() {
      var query = document.getElementById('codesearchQuery');
      var form = document.getElementById('codesearch');
      form.q.value = "lang:go package:go.googlecode.com " + query.value;
      return true;
}  </script>

<div id="topnav">
  <table summary="">
    <tr>
      <td id="headerImage">
        <a href="../../../index.html"><img src="../../../doc/logo-153x55.png" height="55" width="153" alt="Go Home Page" style="border:0" /></a>
      </td>
      <td>
        <div id="headerDocSetTitle">The Go Programming Language</div>
      </td>
      <td>
        <!-- <table>
          <tr>
            <td>
              <! The input box is outside of the form because we want to add
              a couple of restricts to the query before submitting. If we just
              add the restricts to the text box before submitting, then they
              appear in the box when the user presses 'back'. Thus we use a
              hidden field in the form. However, there's no way to stop the
              non-hidden text box from also submitting a value unless we move
              it outside of the form
              <input type="search" id="codesearchQuery" value="" size="30" onkeydown="return codesearchKeyDown(event);"/>
              <form method="GET" action="http://www.google.com/codesearch" id="codesearch" class="search" onsubmit="return codeSearchSubmit();" style="display:inline;">
                <input type="hidden" name="q" value=""/>
                <input type="submit" value="Code search" />
                <span style="color: red">(TODO: remove for now?)</span>
              </form>
            </td>
          </tr>
          <tr>
            <td>
              <span style="color: gray;">(e.g. &ldquo;pem&rdquo; or &ldquo;xml&rdquo;)</span>
            </td>
          </tr>
        </table> -->
      </td>
    </tr>
  </table>
</div>

<div id="linkList">
  <ul>
    <li class="navhead"><a href="../../../index.html">Home</a></li>

    <li class="blank">&nbsp;</li>
    <li class="navhead">Documents</li>
    <li><a href="../../../doc/go_tutorial.html">Tutorial</a></li>
    <li><a href="../../../doc/effective_go.html">Effective Go</a></li>
    <li><a href="../../../doc/go_faq.html">FAQ</a></li>
    <li><a href="../../../doc/go_lang_faq.html">Language Design FAQ</a></li>
    <li><a href="http://www.youtube.com/watch?v=rKnDgT73v8s">Tech talk (1 hour)</a> (<a href="../../../doc/go_talk-20091030.pdf">PDF</a>)</li>
    <li><a href="../../../doc/go_spec.html">Language Specification</a></li>
    <li><a href="../../../doc/go_mem.html">Memory Model</a></li>
    <li><a href="../../../doc/go_for_cpp_programmers.html">Go for C++ Programmers</a></li>

    <li class="blank">&nbsp;</li>
    <li class="navhead">How To</li>
    <li><a href="../../../doc/install.html">Install Go</a></li>
    <li><a href="../../../doc/contribute.html">Contribute code</a></li>

    <li class="blank">&nbsp;</li>
    <li class="navhead">Programming</li>
    <li><a href="../../../cmd/index.html">Command documentation</a></li>
    <li><a href="../../../pkg/index.html">Package documentation</a></li>
    <li><a href="../../index.html">Source files</a></li>

    <li class="blank">&nbsp;</li>
    <li class="navhead">Help</li>
    <li>#go-nuts on irc.freenode.net</li>
    <li><a href="http://groups.google.com/group/golang-nuts">Go Nuts mailing list</a></li>
    <li><a href="http://code.google.com/p/go/issues/list">Issue tracker</a></li>

    <li class="blank">&nbsp;</li>
    <li class="navhead">Go code search</li>
    <form method="GET" action="http://golang.org/search" class="search">
    <input type="search" name="q" value="" size="25" style="width:80%; max-width:200px" />
    <input type="submit" value="Go" />
    </form>

    <li class="blank">&nbsp;</li>
    <li class="navhead">Last update</li>
	<li>Thu Nov 12 15:49:05 PST 2009</li>
  </ul>
</div>

<div id="content">
  <h1 id="generatedHeader">Source file /src/pkg/asn1/asn1_test.go</h1>

  <!-- The Table of Contents is automatically inserted in this <div>.
       Do not delete this <div>. -->
  <div id="nav"></div>

  <!-- Content is HTML-escaped elsewhere -->
  <pre>
<a id="L1"></a><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="comment">// license that can be found in the LICENSE file.</span>

<a id="L5"></a>package asn1

<a id="L7"></a>import (
    <a id="L8"></a>&#34;bytes&#34;;
    <a id="L9"></a>&#34;reflect&#34;;
    <a id="L10"></a>&#34;strings&#34;;
    <a id="L11"></a>&#34;testing&#34;;
    <a id="L12"></a>&#34;time&#34;;
<a id="L13"></a>)

<a id="L15"></a>type int64Test struct {
    <a id="L16"></a>in  []byte;
    <a id="L17"></a>ok  bool;
    <a id="L18"></a>out int64;
<a id="L19"></a>}

<a id="L21"></a>var int64TestData = []int64Test{
    <a id="L22"></a>int64Test{[]byte{0x00}, true, 0},
    <a id="L23"></a>int64Test{[]byte{0x7f}, true, 127},
    <a id="L24"></a>int64Test{[]byte{0x00, 0x80}, true, 128},
    <a id="L25"></a>int64Test{[]byte{0x01, 0x00}, true, 256},
    <a id="L26"></a>int64Test{[]byte{0x80}, true, -128},
    <a id="L27"></a>int64Test{[]byte{0xff, 0x7f}, true, -129},
    <a id="L28"></a>int64Test{[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, true, -1},
    <a id="L29"></a>int64Test{[]byte{0xff}, true, -1},
    <a id="L30"></a>int64Test{[]byte{0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, true, -9223372036854775808},
    <a id="L31"></a>int64Test{[]byte{0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, false, 0},
<a id="L32"></a>}

<a id="L34"></a>func TestParseInt64(t *testing.T) {
    <a id="L35"></a>for i, test := range int64TestData {
        <a id="L36"></a>ret, err := parseInt64(test.in);
        <a id="L37"></a>if (err == nil) != test.ok {
            <a id="L38"></a>t.Errorf(&#34;#%d: Incorrect error result (did fail? %v, expected: %v)&#34;, i, err == nil, test.ok)
        <a id="L39"></a>}
        <a id="L40"></a>if test.ok &amp;&amp; ret != test.out {
            <a id="L41"></a>t.Errorf(&#34;#%d: Bad result: %v (expected %v)&#34;, i, ret, test.out)
        <a id="L42"></a>}
    <a id="L43"></a>}
<a id="L44"></a>}

<a id="L46"></a>type bitStringTest struct {
    <a id="L47"></a>in        []byte;
    <a id="L48"></a>ok        bool;
    <a id="L49"></a>out       []byte;
    <a id="L50"></a>bitLength int;
<a id="L51"></a>}

<a id="L53"></a>var bitStringTestData = []bitStringTest{
    <a id="L54"></a>bitStringTest{[]byte{}, false, []byte{}, 0},
    <a id="L55"></a>bitStringTest{[]byte{0x00}, true, []byte{}, 0},
    <a id="L56"></a>bitStringTest{[]byte{0x07, 0x00}, true, []byte{0x00}, 1},
    <a id="L57"></a>bitStringTest{[]byte{0x07, 0x01}, false, []byte{}, 0},
    <a id="L58"></a>bitStringTest{[]byte{0x07, 0x40}, false, []byte{}, 0},
    <a id="L59"></a>bitStringTest{[]byte{0x08, 0x00}, false, []byte{}, 0},
<a id="L60"></a>}

<a id="L62"></a>func TestBitString(t *testing.T) {
    <a id="L63"></a>for i, test := range bitStringTestData {
        <a id="L64"></a>ret, err := parseBitString(test.in);
        <a id="L65"></a>if (err == nil) != test.ok {
            <a id="L66"></a>t.Errorf(&#34;#%d: Incorrect error result (did fail? %v, expected: %v)&#34;, i, err == nil, test.ok)
        <a id="L67"></a>}
        <a id="L68"></a>if err == nil {
            <a id="L69"></a>if test.bitLength != ret.BitLength || bytes.Compare(ret.Bytes, test.out) != 0 {
                <a id="L70"></a>t.Errorf(&#34;#%d: Bad result: %v (expected %v %v)&#34;, i, ret, test.out, test.bitLength)
            <a id="L71"></a>}
        <a id="L72"></a>}
    <a id="L73"></a>}
<a id="L74"></a>}

<a id="L76"></a>func TestBitStringAt(t *testing.T) {
    <a id="L77"></a>bs := BitString{[]byte{0x82, 0x40}, 16};
    <a id="L78"></a>if bs.At(0) != 1 {
        <a id="L79"></a>t.Error(&#34;#1: Failed&#34;)
    <a id="L80"></a>}
    <a id="L81"></a>if bs.At(1) != 0 {
        <a id="L82"></a>t.Error(&#34;#2: Failed&#34;)
    <a id="L83"></a>}
    <a id="L84"></a>if bs.At(6) != 1 {
        <a id="L85"></a>t.Error(&#34;#3: Failed&#34;)
    <a id="L86"></a>}
    <a id="L87"></a>if bs.At(9) != 1 {
        <a id="L88"></a>t.Error(&#34;#4: Failed&#34;)
    <a id="L89"></a>}
<a id="L90"></a>}

<a id="L92"></a>type objectIdentifierTest struct {
    <a id="L93"></a>in  []byte;
    <a id="L94"></a>ok  bool;
    <a id="L95"></a>out []int;
<a id="L96"></a>}

<a id="L98"></a>var objectIdentifierTestData = []objectIdentifierTest{
    <a id="L99"></a>objectIdentifierTest{[]byte{}, false, []int{}},
    <a id="L100"></a>objectIdentifierTest{[]byte{85}, true, []int{2, 5}},
    <a id="L101"></a>objectIdentifierTest{[]byte{85, 0x02}, true, []int{2, 5, 2}},
    <a id="L102"></a>objectIdentifierTest{[]byte{85, 0x02, 0xc0, 0x00}, true, []int{2, 5, 2, 0x2000}},
    <a id="L103"></a>objectIdentifierTest{[]byte{85, 0x02, 0xc0, 0x80, 0x80, 0x80, 0x80}, false, []int{}},
<a id="L104"></a>}

<a id="L106"></a>func TestObjectIdentifier(t *testing.T) {
    <a id="L107"></a>for i, test := range objectIdentifierTestData {
        <a id="L108"></a>ret, err := parseObjectIdentifier(test.in);
        <a id="L109"></a>if (err == nil) != test.ok {
            <a id="L110"></a>t.Errorf(&#34;#%d: Incorrect error result (did fail? %v, expected: %v)&#34;, i, err == nil, test.ok)
        <a id="L111"></a>}
        <a id="L112"></a>if err == nil {
            <a id="L113"></a>if !reflect.DeepEqual(test.out, ret) {
                <a id="L114"></a>t.Errorf(&#34;#%d: Bad result: %v (expected %v)&#34;, i, ret, test.out)
            <a id="L115"></a>}
        <a id="L116"></a>}
    <a id="L117"></a>}
<a id="L118"></a>}

<a id="L120"></a>type timeTest struct {
    <a id="L121"></a>in  string;
    <a id="L122"></a>ok  bool;
    <a id="L123"></a>out time.Time;
<a id="L124"></a>}

<a id="L126"></a>var timeTestData = []timeTest{
    <a id="L127"></a>timeTest{&#34;910506164540-0700&#34;, true, time.Time{1991, 05, 06, 16, 45, 40, 0, -7 * 60 * 60, &#34;&#34;}},
    <a id="L128"></a>timeTest{&#34;910506164540+0730&#34;, true, time.Time{1991, 05, 06, 16, 45, 40, 0, 7*60*60 + 30*60, &#34;&#34;}},
    <a id="L129"></a>timeTest{&#34;910506234540Z&#34;, true, time.Time{1991, 05, 06, 23, 45, 40, 0, 0, &#34;&#34;}},
    <a id="L130"></a>timeTest{&#34;9105062345Z&#34;, true, time.Time{1991, 05, 06, 23, 45, 0, 0, 0, &#34;&#34;}},
    <a id="L131"></a>timeTest{&#34;a10506234540Z&#34;, false, time.Time{}},
    <a id="L132"></a>timeTest{&#34;91a506234540Z&#34;, false, time.Time{}},
    <a id="L133"></a>timeTest{&#34;9105a6234540Z&#34;, false, time.Time{}},
    <a id="L134"></a>timeTest{&#34;910506a34540Z&#34;, false, time.Time{}},
    <a id="L135"></a>timeTest{&#34;910506334a40Z&#34;, false, time.Time{}},
    <a id="L136"></a>timeTest{&#34;91050633444aZ&#34;, false, time.Time{}},
    <a id="L137"></a>timeTest{&#34;910506334461Z&#34;, false, time.Time{}},
    <a id="L138"></a>timeTest{&#34;910506334400Za&#34;, false, time.Time{}},
<a id="L139"></a>}

<a id="L141"></a>func TestTime(t *testing.T) {
    <a id="L142"></a>for i, test := range timeTestData {
        <a id="L143"></a>ret, err := parseUTCTime(strings.Bytes(test.in));
        <a id="L144"></a>if (err == nil) != test.ok {
            <a id="L145"></a>t.Errorf(&#34;#%d: Incorrect error result (did fail? %v, expected: %v)&#34;, i, err == nil, test.ok)
        <a id="L146"></a>}
        <a id="L147"></a>if err == nil {
            <a id="L148"></a>if !reflect.DeepEqual(test.out, ret) {
                <a id="L149"></a>t.Errorf(&#34;#%d: Bad result: %v (expected %v)&#34;, i, ret, test.out)
            <a id="L150"></a>}
        <a id="L151"></a>}
    <a id="L152"></a>}
<a id="L153"></a>}

<a id="L155"></a>type tagAndLengthTest struct {
    <a id="L156"></a>in  []byte;
    <a id="L157"></a>ok  bool;
    <a id="L158"></a>out tagAndLength;
<a id="L159"></a>}

<a id="L161"></a>var tagAndLengthData = []tagAndLengthTest{
    <a id="L162"></a>tagAndLengthTest{[]byte{0x80, 0x01}, true, tagAndLength{2, 0, 1, false}},
    <a id="L163"></a>tagAndLengthTest{[]byte{0xa0, 0x01}, true, tagAndLength{2, 0, 1, true}},
    <a id="L164"></a>tagAndLengthTest{[]byte{0x02, 0x00}, true, tagAndLength{0, 2, 0, false}},
    <a id="L165"></a>tagAndLengthTest{[]byte{0xfe, 0x00}, true, tagAndLength{3, 30, 0, true}},
    <a id="L166"></a>tagAndLengthTest{[]byte{0x1f, 0x01, 0x00}, true, tagAndLength{0, 1, 0, false}},
    <a id="L167"></a>tagAndLengthTest{[]byte{0x1f, 0x81, 0x00, 0x00}, true, tagAndLength{0, 128, 0, false}},
    <a id="L168"></a>tagAndLengthTest{[]byte{0x1f, 0x81, 0x80, 0x01, 0x00}, true, tagAndLength{0, 0x4001, 0, false}},
    <a id="L169"></a>tagAndLengthTest{[]byte{0x00, 0x81, 0x01}, true, tagAndLength{0, 0, 1, false}},
    <a id="L170"></a>tagAndLengthTest{[]byte{0x00, 0x82, 0x01, 0x00}, true, tagAndLength{0, 0, 256, false}},
    <a id="L171"></a>tagAndLengthTest{[]byte{0x00, 0x83, 0x01, 0x00}, false, tagAndLength{}},
    <a id="L172"></a>tagAndLengthTest{[]byte{0x1f, 0x85}, false, tagAndLength{}},
    <a id="L173"></a>tagAndLengthTest{[]byte{0x30, 0x80}, false, tagAndLength{}},
<a id="L174"></a>}

<a id="L176"></a>func TestParseTagAndLength(t *testing.T) {
    <a id="L177"></a>for i, test := range tagAndLengthData {
        <a id="L178"></a>tagAndLength, _, err := parseTagAndLength(test.in, 0);
        <a id="L179"></a>if (err == nil) != test.ok {
            <a id="L180"></a>t.Errorf(&#34;#%d: Incorrect error result (did pass? %v, expected: %v)&#34;, i, err == nil, test.ok)
        <a id="L181"></a>}
        <a id="L182"></a>if err == nil &amp;&amp; !reflect.DeepEqual(test.out, tagAndLength) {
            <a id="L183"></a>t.Errorf(&#34;#%d: Bad result: %v (expected %v)&#34;, i, tagAndLength, test.out)
        <a id="L184"></a>}
    <a id="L185"></a>}
<a id="L186"></a>}

<a id="L188"></a>type parseFieldParametersTest struct {
    <a id="L189"></a>in  string;
    <a id="L190"></a>out fieldParameters;
<a id="L191"></a>}

<a id="L193"></a>func newInt(n int) *int { return &amp;n }

<a id="L195"></a>func newInt64(n int64) *int64 { return &amp;n }

<a id="L197"></a>func newString(s string) *string { return &amp;s }

<a id="L199"></a>func newBool(b bool) *bool { return &amp;b }

<a id="L201"></a>var parseFieldParametersTestData []parseFieldParametersTest = []parseFieldParametersTest{
    <a id="L202"></a>parseFieldParametersTest{&#34;&#34;, fieldParameters{false, false, nil, nil}},
    <a id="L203"></a>parseFieldParametersTest{&#34;optional&#34;, fieldParameters{true, false, nil, nil}},
    <a id="L204"></a>parseFieldParametersTest{&#34;explicit&#34;, fieldParameters{false, true, nil, new(int)}},
    <a id="L205"></a>parseFieldParametersTest{&#34;optional,explicit&#34;, fieldParameters{true, true, nil, new(int)}},
    <a id="L206"></a>parseFieldParametersTest{&#34;default:42&#34;, fieldParameters{false, false, newInt64(42), nil}},
    <a id="L207"></a>parseFieldParametersTest{&#34;tag:17&#34;, fieldParameters{false, false, nil, newInt(17)}},
    <a id="L208"></a>parseFieldParametersTest{&#34;optional,explicit,default:42,tag:17&#34;, fieldParameters{true, true, newInt64(42), newInt(17)}},
    <a id="L209"></a>parseFieldParametersTest{&#34;optional,explicit,default:42,tag:17,rubbish1&#34;, fieldParameters{true, true, newInt64(42), newInt(17)}},
<a id="L210"></a>}

<a id="L212"></a>func TestParseFieldParameters(t *testing.T) {
    <a id="L213"></a>for i, test := range parseFieldParametersTestData {
        <a id="L214"></a>f := parseFieldParameters(test.in);
        <a id="L215"></a>if !reflect.DeepEqual(f, test.out) {
            <a id="L216"></a>t.Errorf(&#34;#%d: Bad result: %v (expected %v)&#34;, i, f, test.out)
        <a id="L217"></a>}
    <a id="L218"></a>}
<a id="L219"></a>}

<a id="L221"></a>type unmarshalTest struct {
    <a id="L222"></a>in  []byte;
    <a id="L223"></a>out interface{};
<a id="L224"></a>}

<a id="L226"></a>type TestObjectIdentifierStruct struct {
    <a id="L227"></a>OID ObjectIdentifier;
<a id="L228"></a>}

<a id="L230"></a>type TestContextSpecificTags struct {
    <a id="L231"></a>A int &#34;tag:1&#34;;
<a id="L232"></a>}

<a id="L234"></a>type TestContextSpecificTags2 struct {
    <a id="L235"></a>A   int &#34;explicit,tag:1&#34;;
    <a id="L236"></a>B   int;
<a id="L237"></a>}

<a id="L239"></a>var unmarshalTestData []unmarshalTest = []unmarshalTest{
    <a id="L240"></a>unmarshalTest{[]byte{0x02, 0x01, 0x42}, newInt(0x42)},
    <a id="L241"></a>unmarshalTest{[]byte{0x30, 0x08, 0x06, 0x06, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d}, &amp;TestObjectIdentifierStruct{[]int{1, 2, 840, 113549}}},
    <a id="L242"></a>unmarshalTest{[]byte{0x03, 0x04, 0x06, 0x6e, 0x5d, 0xc0}, &amp;BitString{[]byte{110, 93, 192}, 18}},
    <a id="L243"></a>unmarshalTest{[]byte{0x30, 0x09, 0x02, 0x01, 0x01, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03}, &amp;[]int{1, 2, 3}},
    <a id="L244"></a>unmarshalTest{[]byte{0x02, 0x01, 0x10}, newInt(16)},
    <a id="L245"></a>unmarshalTest{[]byte{0x13, 0x04, &#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;}, newString(&#34;test&#34;)},
    <a id="L246"></a>unmarshalTest{[]byte{0x16, 0x04, &#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;}, newString(&#34;test&#34;)},
    <a id="L247"></a>unmarshalTest{[]byte{0x16, 0x04, &#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;}, &amp;RawValue{0, 22, false, []byte{&#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;}}},
    <a id="L248"></a>unmarshalTest{[]byte{0x04, 0x04, 1, 2, 3, 4}, &amp;RawValue{0, 4, false, []byte{1, 2, 3, 4}}},
    <a id="L249"></a>unmarshalTest{[]byte{0x30, 0x03, 0x81, 0x01, 0x01}, &amp;TestContextSpecificTags{1}},
    <a id="L250"></a>unmarshalTest{[]byte{0x30, 0x08, 0xa1, 0x03, 0x02, 0x01, 0x01, 0x02, 0x01, 0x02}, &amp;TestContextSpecificTags2{1, 2}},
    <a id="L251"></a>unmarshalTest{[]byte{0x01, 0x01, 0x00}, newBool(false)},
    <a id="L252"></a>unmarshalTest{[]byte{0x01, 0x01, 0x01}, newBool(true)},
<a id="L253"></a>}

<a id="L255"></a>func TestUnmarshal(t *testing.T) {
    <a id="L256"></a>for i, test := range unmarshalTestData {
        <a id="L257"></a>pv := reflect.MakeZero(reflect.NewValue(test.out).Type());
        <a id="L258"></a>zv := reflect.MakeZero(pv.Type().(*reflect.PtrType).Elem());
        <a id="L259"></a>pv.(*reflect.PtrValue).PointTo(zv);
        <a id="L260"></a>val := pv.Interface();
        <a id="L261"></a>err := Unmarshal(val, test.in);
        <a id="L262"></a>if err != nil {
            <a id="L263"></a>t.Errorf(&#34;Unmarshal failed at index %d %v&#34;, i, err)
        <a id="L264"></a>}
        <a id="L265"></a>if !reflect.DeepEqual(val, test.out) {
            <a id="L266"></a>t.Errorf(&#34;#%d:\nhave %#v\nwant %#v&#34;, i, val, test.out)
        <a id="L267"></a>}
    <a id="L268"></a>}
<a id="L269"></a>}

<a id="L271"></a>type Certificate struct {
    <a id="L272"></a>TBSCertificate     TBSCertificate;
    <a id="L273"></a>SignatureAlgorithm AlgorithmIdentifier;
    <a id="L274"></a>SignatureValue     BitString;
<a id="L275"></a>}

<a id="L277"></a>type TBSCertificate struct {
    <a id="L278"></a>Version            int &#34;optional,explicit,default:0,tag:0&#34;;
    <a id="L279"></a>SerialNumber       RawValue;
    <a id="L280"></a>SignatureAlgorithm AlgorithmIdentifier;
    <a id="L281"></a>Issuer             RDNSequence;
    <a id="L282"></a>Validity           Validity;
    <a id="L283"></a>Subject            RDNSequence;
    <a id="L284"></a>PublicKey          PublicKeyInfo;
<a id="L285"></a>}

<a id="L287"></a>type AlgorithmIdentifier struct {
    <a id="L288"></a>Algorithm ObjectIdentifier;
<a id="L289"></a>}

<a id="L291"></a>type RDNSequence []RelativeDistinguishedName

<a id="L293"></a>type RelativeDistinguishedName []AttributeTypeAndValue

<a id="L295"></a>type AttributeTypeAndValue struct {
    <a id="L296"></a>Type  ObjectIdentifier;
    <a id="L297"></a>Value interface{};
<a id="L298"></a>}

<a id="L300"></a>type Validity struct {
    <a id="L301"></a>NotBefore, NotAfter time.Time;
<a id="L302"></a>}

<a id="L304"></a>type PublicKeyInfo struct {
    <a id="L305"></a>Algorithm AlgorithmIdentifier;
    <a id="L306"></a>PublicKey BitString;
<a id="L307"></a>}

<a id="L309"></a>func TestCertificate(t *testing.T) {
    <a id="L310"></a><span class="comment">// This is a minimal, self-signed certificate that should parse correctly.</span>
    <a id="L311"></a>var cert Certificate;
    <a id="L312"></a>if err := Unmarshal(&amp;cert, derEncodedSelfSignedCertBytes); err != nil {
        <a id="L313"></a>t.Errorf(&#34;Unmarshal failed: %v&#34;, err)
    <a id="L314"></a>}
    <a id="L315"></a>if !reflect.DeepEqual(cert, derEncodedSelfSignedCert) {
        <a id="L316"></a>t.Errorf(&#34;Bad result:\ngot: %+v\nwant: %+v\n&#34;, cert, derEncodedSelfSignedCert)
    <a id="L317"></a>}
<a id="L318"></a>}

<a id="L320"></a>func TestCertificateWithNUL(t *testing.T) {
    <a id="L321"></a><span class="comment">// This is the paypal NUL-hack certificate. It should fail to parse because</span>
    <a id="L322"></a><span class="comment">// NUL isn&#39;t a permitted character in a PrintableString.</span>

    <a id="L324"></a>var cert Certificate;
    <a id="L325"></a>if err := Unmarshal(&amp;cert, derEncodedPaypalNULCertBytes); err == nil {
        <a id="L326"></a>t.Error(&#34;Unmarshal succeeded, should not have&#34;)
    <a id="L327"></a>}
<a id="L328"></a>}

<a id="L330"></a>var derEncodedSelfSignedCert = Certificate{
    <a id="L331"></a>TBSCertificate: TBSCertificate{
        <a id="L332"></a>Version: 0,
        <a id="L333"></a>SerialNumber: RawValue{Class: 0, Tag: 2, IsCompound: false, Bytes: []uint8{0x0, 0x8c, 0xc3, 0x37, 0x92, 0x10, 0xec, 0x2c, 0x98}},
        <a id="L334"></a>SignatureAlgorithm: AlgorithmIdentifier{Algorithm: ObjectIdentifier{1, 2, 840, 113549, 1, 1, 5}},
        <a id="L335"></a>Issuer: RDNSequence{
            <a id="L336"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{2, 5, 4, 6}, Value: &#34;XX&#34;}},
            <a id="L337"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{2, 5, 4, 8}, Value: &#34;Some-State&#34;}},
            <a id="L338"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{2, 5, 4, 7}, Value: &#34;City&#34;}},
            <a id="L339"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{2, 5, 4, 10}, Value: &#34;Internet Widgits Pty Ltd&#34;}},
            <a id="L340"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{2, 5, 4, 3}, Value: &#34;false.example.com&#34;}},
            <a id="L341"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{1, 2, 840, 113549, 1, 9, 1}, Value: &#34;false@example.com&#34;}},
        <a id="L342"></a>},
        <a id="L343"></a>Validity: Validity{NotBefore: time.Time{Year: 2009, Month: 10, Day: 8, Hour: 0, Minute: 25, Second: 53, Weekday: 0, ZoneOffset: 0, Zone: &#34;&#34;}, NotAfter: time.Time{Year: 2010, Month: 10, Day: 8, Hour: 0, Minute: 25, Second: 53, Weekday: 0, ZoneOffset: 0, Zone: &#34;&#34;}},
        <a id="L344"></a>Subject: RDNSequence{
            <a id="L345"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{2, 5, 4, 6}, Value: &#34;XX&#34;}},
            <a id="L346"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{2, 5, 4, 8}, Value: &#34;Some-State&#34;}},
            <a id="L347"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{2, 5, 4, 7}, Value: &#34;City&#34;}},
            <a id="L348"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{2, 5, 4, 10}, Value: &#34;Internet Widgits Pty Ltd&#34;}},
            <a id="L349"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{2, 5, 4, 3}, Value: &#34;false.example.com&#34;}},
            <a id="L350"></a>RelativeDistinguishedName{AttributeTypeAndValue{Type: ObjectIdentifier{1, 2, 840, 113549, 1, 9, 1}, Value: &#34;false@example.com&#34;}},
        <a id="L351"></a>},
        <a id="L352"></a>PublicKey: PublicKeyInfo{
            <a id="L353"></a>Algorithm: AlgorithmIdentifier{Algorithm: ObjectIdentifier{1, 2, 840, 113549, 1, 1, 1}},
            <a id="L354"></a>PublicKey: BitString{
                <a id="L355"></a>Bytes: []uint8{
                    <a id="L356"></a>0x30, 0x48, 0x2, 0x41, 0x0, 0xcd, 0xb7,
                    <a id="L357"></a>0x63, 0x9c, 0x32, 0x78, 0xf0, 0x6, 0xaa, 0x27, 0x7f, 0x6e, 0xaf, 0x42,
                    <a id="L358"></a>0x90, 0x2b, 0x59, 0x2d, 0x8c, 0xbc, 0xbe, 0x38, 0xa1, 0xc9, 0x2b, 0xa4,
                    <a id="L359"></a>0x69, 0x5a, 0x33, 0x1b, 0x1d, 0xea, 0xde, 0xad, 0xd8, 0xe9, 0xa5, 0xc2,
                    <a id="L360"></a>0x7e, 0x8c, 0x4c, 0x2f, 0xd0, 0xa8, 0x88, 0x96, 0x57, 0x72, 0x2a, 0x4f,
                    <a id="L361"></a>0x2a, 0xf7, 0x58, 0x9c, 0xf2, 0xc7, 0x70, 0x45, 0xdc, 0x8f, 0xde, 0xec,
                    <a id="L362"></a>0x35, 0x7d, 0x2, 0x3, 0x1, 0x0, 0x1,
                <a id="L363"></a>},
                <a id="L364"></a>BitLength: 592,
            <a id="L365"></a>},
        <a id="L366"></a>},
    <a id="L367"></a>},
    <a id="L368"></a>SignatureAlgorithm: AlgorithmIdentifier{Algorithm: ObjectIdentifier{1, 2, 840, 113549, 1, 1, 5}},
    <a id="L369"></a>SignatureValue: BitString{
        <a id="L370"></a>Bytes: []uint8{
            <a id="L371"></a>0xa6, 0x7b, 0x6, 0xec, 0x5e, 0xce,
            <a id="L372"></a>0x92, 0x77, 0x2c, 0xa4, 0x13, 0xcb, 0xa3, 0xca, 0x12, 0x56, 0x8f, 0xdc, 0x6c,
            <a id="L373"></a>0x7b, 0x45, 0x11, 0xcd, 0x40, 0xa7, 0xf6, 0x59, 0x98, 0x4, 0x2, 0xdf, 0x2b,
            <a id="L374"></a>0x99, 0x8b, 0xb9, 0xa4, 0xa8, 0xcb, 0xeb, 0x34, 0xc0, 0xf0, 0xa7, 0x8c, 0xf8,
            <a id="L375"></a>0xd9, 0x1e, 0xde, 0x14, 0xa5, 0xed, 0x76, 0xbf, 0x11, 0x6f, 0xe3, 0x60, 0xaa,
            <a id="L376"></a>0xfa, 0x88, 0x21, 0x49, 0x4, 0x35,
        <a id="L377"></a>},
        <a id="L378"></a>BitLength: 512,
    <a id="L379"></a>},
<a id="L380"></a>}

<a id="L382"></a>var derEncodedSelfSignedCertBytes = []byte{
    <a id="L383"></a>0x30, 0x82, 0x02, 0x18, 0x30,
    <a id="L384"></a>0x82, 0x01, 0xc2, 0x02, 0x09, 0x00, 0x8c, 0xc3, 0x37, 0x92, 0x10, 0xec, 0x2c,
    <a id="L385"></a>0x98, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
    <a id="L386"></a>0x05, 0x05, 0x00, 0x30, 0x81, 0x92, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
    <a id="L387"></a>0x04, 0x06, 0x13, 0x02, 0x58, 0x58, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
    <a id="L388"></a>0x04, 0x08, 0x13, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x2d, 0x53, 0x74, 0x61, 0x74,
    <a id="L389"></a>0x65, 0x31, 0x0d, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x04, 0x43,
    <a id="L390"></a>0x69, 0x74, 0x79, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13,
    <a id="L391"></a>0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x57, 0x69, 0x64,
    <a id="L392"></a>0x67, 0x69, 0x74, 0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4c, 0x74, 0x64, 0x31,
    <a id="L393"></a>0x1a, 0x30, 0x18, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x11, 0x66, 0x61, 0x6c,
    <a id="L394"></a>0x73, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
    <a id="L395"></a>0x6d, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
    <a id="L396"></a>0x01, 0x09, 0x01, 0x16, 0x11, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x40, 0x65, 0x78,
    <a id="L397"></a>0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0x0d,
    <a id="L398"></a>0x30, 0x39, 0x31, 0x30, 0x30, 0x38, 0x30, 0x30, 0x32, 0x35, 0x35, 0x33, 0x5a,
    <a id="L399"></a>0x17, 0x0d, 0x31, 0x30, 0x31, 0x30, 0x30, 0x38, 0x30, 0x30, 0x32, 0x35, 0x35,
    <a id="L400"></a>0x33, 0x5a, 0x30, 0x81, 0x92, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
    <a id="L401"></a>0x06, 0x13, 0x02, 0x58, 0x58, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04,
    <a id="L402"></a>0x08, 0x13, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x2d, 0x53, 0x74, 0x61, 0x74, 0x65,
    <a id="L403"></a>0x31, 0x0d, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x04, 0x43, 0x69,
    <a id="L404"></a>0x74, 0x79, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x18,
    <a id="L405"></a>0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x57, 0x69, 0x64, 0x67,
    <a id="L406"></a>0x69, 0x74, 0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4c, 0x74, 0x64, 0x31, 0x1a,
    <a id="L407"></a>0x30, 0x18, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x11, 0x66, 0x61, 0x6c, 0x73,
    <a id="L408"></a>0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
    <a id="L409"></a>0x31, 0x20, 0x30, 0x1e, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
    <a id="L410"></a>0x09, 0x01, 0x16, 0x11, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x40, 0x65, 0x78, 0x61,
    <a id="L411"></a>0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x5c, 0x30, 0x0d, 0x06,
    <a id="L412"></a>0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
    <a id="L413"></a>0x4b, 0x00, 0x30, 0x48, 0x02, 0x41, 0x00, 0xcd, 0xb7, 0x63, 0x9c, 0x32, 0x78,
    <a id="L414"></a>0xf0, 0x06, 0xaa, 0x27, 0x7f, 0x6e, 0xaf, 0x42, 0x90, 0x2b, 0x59, 0x2d, 0x8c,
    <a id="L415"></a>0xbc, 0xbe, 0x38, 0xa1, 0xc9, 0x2b, 0xa4, 0x69, 0x5a, 0x33, 0x1b, 0x1d, 0xea,
    <a id="L416"></a>0xde, 0xad, 0xd8, 0xe9, 0xa5, 0xc2, 0x7e, 0x8c, 0x4c, 0x2f, 0xd0, 0xa8, 0x88,
    <a id="L417"></a>0x96, 0x57, 0x72, 0x2a, 0x4f, 0x2a, 0xf7, 0x58, 0x9c, 0xf2, 0xc7, 0x70, 0x45,
    <a id="L418"></a>0xdc, 0x8f, 0xde, 0xec, 0x35, 0x7d, 0x02, 0x03, 0x01, 0x00, 0x01, 0x30, 0x0d,
    <a id="L419"></a>0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00,
    <a id="L420"></a>0x03, 0x41, 0x00, 0xa6, 0x7b, 0x06, 0xec, 0x5e, 0xce, 0x92, 0x77, 0x2c, 0xa4,
    <a id="L421"></a>0x13, 0xcb, 0xa3, 0xca, 0x12, 0x56, 0x8f, 0xdc, 0x6c, 0x7b, 0x45, 0x11, 0xcd,
    <a id="L422"></a>0x40, 0xa7, 0xf6, 0x59, 0x98, 0x04, 0x02, 0xdf, 0x2b, 0x99, 0x8b, 0xb9, 0xa4,
    <a id="L423"></a>0xa8, 0xcb, 0xeb, 0x34, 0xc0, 0xf0, 0xa7, 0x8c, 0xf8, 0xd9, 0x1e, 0xde, 0x14,
    <a id="L424"></a>0xa5, 0xed, 0x76, 0xbf, 0x11, 0x6f, 0xe3, 0x60, 0xaa, 0xfa, 0x88, 0x21, 0x49,
    <a id="L425"></a>0x04, 0x35,
<a id="L426"></a>}

<a id="L428"></a>var derEncodedPaypalNULCertBytes = []byte{
    <a id="L429"></a>0x30, 0x82, 0x06, 0x44, 0x30,
    <a id="L430"></a>0x82, 0x05, 0xad, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x03, 0x00, 0xf0, 0x9b,
    <a id="L431"></a>0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05,
    <a id="L432"></a>0x05, 0x00, 0x30, 0x82, 0x01, 0x12, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
    <a id="L433"></a>0x04, 0x06, 0x13, 0x02, 0x45, 0x53, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,
    <a id="L434"></a>0x04, 0x08, 0x13, 0x09, 0x42, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x6f, 0x6e, 0x61,
    <a id="L435"></a>0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x42, 0x61,
    <a id="L436"></a>0x72, 0x63, 0x65, 0x6c, 0x6f, 0x6e, 0x61, 0x31, 0x29, 0x30, 0x27, 0x06, 0x03,
    <a id="L437"></a>0x55, 0x04, 0x0a, 0x13, 0x20, 0x49, 0x50, 0x53, 0x20, 0x43, 0x65, 0x72, 0x74,
    <a id="L438"></a>0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74,
    <a id="L439"></a>0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x73, 0x2e, 0x6c, 0x2e, 0x31, 0x2e,
    <a id="L440"></a>0x30, 0x2c, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x14, 0x25, 0x67, 0x65, 0x6e, 0x65,
    <a id="L441"></a>0x72, 0x61, 0x6c, 0x40, 0x69, 0x70, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
    <a id="L442"></a>0x20, 0x43, 0x2e, 0x49, 0x2e, 0x46, 0x2e, 0x20, 0x20, 0x42, 0x2d, 0x42, 0x36,
    <a id="L443"></a>0x32, 0x32, 0x31, 0x30, 0x36, 0x39, 0x35, 0x31, 0x2e, 0x30, 0x2c, 0x06, 0x03,
    <a id="L444"></a>0x55, 0x04, 0x0b, 0x13, 0x25, 0x69, 0x70, 0x73, 0x43, 0x41, 0x20, 0x43, 0x4c,
    <a id="L445"></a>0x41, 0x53, 0x45, 0x41, 0x31, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
    <a id="L446"></a>0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
    <a id="L447"></a>0x69, 0x74, 0x79, 0x31, 0x2e, 0x30, 0x2c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13,
    <a id="L448"></a>0x25, 0x69, 0x70, 0x73, 0x43, 0x41, 0x20, 0x43, 0x4c, 0x41, 0x53, 0x45, 0x41,
    <a id="L449"></a>0x31, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
    <a id="L450"></a>0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x31,
    <a id="L451"></a>0x20, 0x30, 0x1e, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09,
    <a id="L452"></a>0x01, 0x16, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x40, 0x69, 0x70,
    <a id="L453"></a>0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0x0d, 0x30, 0x39,
    <a id="L454"></a>0x30, 0x32, 0x32, 0x34, 0x32, 0x33, 0x30, 0x34, 0x31, 0x37, 0x5a, 0x17, 0x0d,
    <a id="L455"></a>0x31, 0x31, 0x30, 0x32, 0x32, 0x34, 0x32, 0x33, 0x30, 0x34, 0x31, 0x37, 0x5a,
    <a id="L456"></a>0x30, 0x81, 0x94, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
    <a id="L457"></a>0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13,
    <a id="L458"></a>0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x16,
    <a id="L459"></a>0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x0d, 0x53, 0x61, 0x6e, 0x20,
    <a id="L460"></a>0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x31, 0x11, 0x30, 0x0f,
    <a id="L461"></a>0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
    <a id="L462"></a>0x74, 0x79, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x0b,
    <a id="L463"></a>0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x31, 0x2f,
    <a id="L464"></a>0x30, 0x2d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x26, 0x77, 0x77, 0x77, 0x2e,
    <a id="L465"></a>0x70, 0x61, 0x79, 0x70, 0x61, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x73, 0x73,
    <a id="L466"></a>0x6c, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
    <a id="L467"></a>0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x63, 0x30, 0x81, 0x9f, 0x30, 0x0d,
    <a id="L468"></a>0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00,
    <a id="L469"></a>0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xd2, 0x69,
    <a id="L470"></a>0xfa, 0x6f, 0x3a, 0x00, 0xb4, 0x21, 0x1b, 0xc8, 0xb1, 0x02, 0xd7, 0x3f, 0x19,
    <a id="L471"></a>0xb2, 0xc4, 0x6d, 0xb4, 0x54, 0xf8, 0x8b, 0x8a, 0xcc, 0xdb, 0x72, 0xc2, 0x9e,
    <a id="L472"></a>0x3c, 0x60, 0xb9, 0xc6, 0x91, 0x3d, 0x82, 0xb7, 0x7d, 0x99, 0xff, 0xd1, 0x29,
    <a id="L473"></a>0x84, 0xc1, 0x73, 0x53, 0x9c, 0x82, 0xdd, 0xfc, 0x24, 0x8c, 0x77, 0xd5, 0x41,
    <a id="L474"></a>0xf3, 0xe8, 0x1e, 0x42, 0xa1, 0xad, 0x2d, 0x9e, 0xff, 0x5b, 0x10, 0x26, 0xce,
    <a id="L475"></a>0x9d, 0x57, 0x17, 0x73, 0x16, 0x23, 0x38, 0xc8, 0xd6, 0xf1, 0xba, 0xa3, 0x96,
    <a id="L476"></a>0x5b, 0x16, 0x67, 0x4a, 0x4f, 0x73, 0x97, 0x3a, 0x4d, 0x14, 0xa4, 0xf4, 0xe2,
    <a id="L477"></a>0x3f, 0x8b, 0x05, 0x83, 0x42, 0xd1, 0xd0, 0xdc, 0x2f, 0x7a, 0xe5, 0xb6, 0x10,
    <a id="L478"></a>0xb2, 0x11, 0xc0, 0xdc, 0x21, 0x2a, 0x90, 0xff, 0xae, 0x97, 0x71, 0x5a, 0x49,
    <a id="L479"></a>0x81, 0xac, 0x40, 0xf3, 0x3b, 0xb8, 0x59, 0xb2, 0x4f, 0x02, 0x03, 0x01, 0x00,
    <a id="L480"></a>0x01, 0xa3, 0x82, 0x03, 0x21, 0x30, 0x82, 0x03, 0x1d, 0x30, 0x09, 0x06, 0x03,
    <a id="L481"></a>0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x11, 0x06, 0x09, 0x60, 0x86,
    <a id="L482"></a>0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x01, 0x04, 0x04, 0x03, 0x02, 0x06, 0x40,
    <a id="L483"></a>0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x03, 0xf8,
    <a id="L484"></a>0x30, 0x13, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08,
    <a id="L485"></a>0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55,
    <a id="L486"></a>0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x61, 0x8f, 0x61, 0x34, 0x43, 0x55, 0x14,
    <a id="L487"></a>0x7f, 0x27, 0x09, 0xce, 0x4c, 0x8b, 0xea, 0x9b, 0x7b, 0x19, 0x25, 0xbc, 0x6e,
    <a id="L488"></a>0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    <a id="L489"></a>0x0e, 0x07, 0x60, 0xd4, 0x39, 0xc9, 0x1b, 0x5b, 0x5d, 0x90, 0x7b, 0x23, 0xc8,
    <a id="L490"></a>0xd2, 0x34, 0x9d, 0x4a, 0x9a, 0x46, 0x39, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d,
    <a id="L491"></a>0x11, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1c, 0x06, 0x03, 0x55, 0x1d, 0x12, 0x04,
    <a id="L492"></a>0x15, 0x30, 0x13, 0x81, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x40,
    <a id="L493"></a>0x69, 0x70, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x72, 0x06, 0x09,
    <a id="L494"></a>0x60, 0x86, 0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x0d, 0x04, 0x65, 0x16, 0x63,
    <a id="L495"></a>0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    <a id="L496"></a>0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4e,
    <a id="L497"></a>0x4f, 0x54, 0x20, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x2e,
    <a id="L498"></a>0x20, 0x43, 0x4c, 0x41, 0x53, 0x45, 0x41, 0x31, 0x20, 0x53, 0x65, 0x72, 0x76,
    <a id="L499"></a>0x65, 0x72, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
    <a id="L500"></a>0x65, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x68,
    <a id="L501"></a>0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x70,
    <a id="L502"></a>0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x30, 0x2f, 0x06, 0x09, 0x60,
    <a id="L503"></a>0x86, 0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x02, 0x04, 0x22, 0x16, 0x20, 0x68,
    <a id="L504"></a>0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x70,
    <a id="L505"></a>0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x70, 0x73, 0x63, 0x61,
    <a id="L506"></a>0x32, 0x30, 0x30, 0x32, 0x2f, 0x30, 0x43, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01,
    <a id="L507"></a>0x86, 0xf8, 0x42, 0x01, 0x04, 0x04, 0x36, 0x16, 0x34, 0x68, 0x74, 0x74, 0x70,
    <a id="L508"></a>0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x70, 0x73, 0x63, 0x61,
    <a id="L509"></a>0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x70, 0x73, 0x63, 0x61, 0x32, 0x30, 0x30,
    <a id="L510"></a>0x32, 0x2f, 0x69, 0x70, 0x73, 0x63, 0x61, 0x32, 0x30, 0x30, 0x32, 0x43, 0x4c,
    <a id="L511"></a>0x41, 0x53, 0x45, 0x41, 0x31, 0x2e, 0x63, 0x72, 0x6c, 0x30, 0x46, 0x06, 0x09,
    <a id="L512"></a>0x60, 0x86, 0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x03, 0x04, 0x39, 0x16, 0x37,
    <a id="L513"></a>0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69,
    <a id="L514"></a>0x70, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x70, 0x73, 0x63,
    <a id="L515"></a>0x61, 0x32, 0x30, 0x30, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74,
    <a id="L516"></a>0x69, 0x6f, 0x6e, 0x43, 0x4c, 0x41, 0x53, 0x45, 0x41, 0x31, 0x2e, 0x68, 0x74,
    <a id="L517"></a>0x6d, 0x6c, 0x3f, 0x30, 0x43, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xf8,
    <a id="L518"></a>0x42, 0x01, 0x07, 0x04, 0x36, 0x16, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
    <a id="L519"></a>0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x70, 0x73, 0x63, 0x61, 0x2e, 0x63,
    <a id="L520"></a>0x6f, 0x6d, 0x2f, 0x69, 0x70, 0x73, 0x63, 0x61, 0x32, 0x30, 0x30, 0x32, 0x2f,
    <a id="L521"></a>0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x43, 0x4c, 0x41, 0x53, 0x45, 0x41,
    <a id="L522"></a>0x31, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x3f, 0x30, 0x41, 0x06, 0x09, 0x60, 0x86,
    <a id="L523"></a>0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x08, 0x04, 0x34, 0x16, 0x32, 0x68, 0x74,
    <a id="L524"></a>0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x70, 0x73,
    <a id="L525"></a>0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x70, 0x73, 0x63, 0x61, 0x32,
    <a id="L526"></a>0x30, 0x30, 0x32, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x4c, 0x41,
    <a id="L527"></a>0x53, 0x45, 0x41, 0x31, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x30, 0x81, 0x83, 0x06,
    <a id="L528"></a>0x03, 0x55, 0x1d, 0x1f, 0x04, 0x7c, 0x30, 0x7a, 0x30, 0x39, 0xa0, 0x37, 0xa0,
    <a id="L529"></a>0x35, 0x86, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
    <a id="L530"></a>0x2e, 0x69, 0x70, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x70,
    <a id="L531"></a>0x73, 0x63, 0x61, 0x32, 0x30, 0x30, 0x32, 0x2f, 0x69, 0x70, 0x73, 0x63, 0x61,
    <a id="L532"></a>0x32, 0x30, 0x30, 0x32, 0x43, 0x4c, 0x41, 0x53, 0x45, 0x41, 0x31, 0x2e, 0x63,
    <a id="L533"></a>0x72, 0x6c, 0x30, 0x3d, 0xa0, 0x3b, 0xa0, 0x39, 0x86, 0x37, 0x68, 0x74, 0x74,
    <a id="L534"></a>0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x69,
    <a id="L535"></a>0x70, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x70, 0x73, 0x63,
    <a id="L536"></a>0x61, 0x32, 0x30, 0x30, 0x32, 0x2f, 0x69, 0x70, 0x73, 0x63, 0x61, 0x32, 0x30,
    <a id="L537"></a>0x30, 0x32, 0x43, 0x4c, 0x41, 0x53, 0x45, 0x41, 0x31, 0x2e, 0x63, 0x72, 0x6c,
    <a id="L538"></a>0x30, 0x32, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04,
    <a id="L539"></a>0x26, 0x30, 0x24, 0x30, 0x22, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,
    <a id="L540"></a>0x30, 0x01, 0x86, 0x16, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x63,
    <a id="L541"></a>0x73, 0x70, 0x2e, 0x69, 0x70, 0x73, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
    <a id="L542"></a>0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05,
    <a id="L543"></a>0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x68, 0xee, 0x79, 0x97, 0x97, 0xdd, 0x3b,
    <a id="L544"></a>0xef, 0x16, 0x6a, 0x06, 0xf2, 0x14, 0x9a, 0x6e, 0xcd, 0x9e, 0x12, 0xf7, 0xaa,
    <a id="L545"></a>0x83, 0x10, 0xbd, 0xd1, 0x7c, 0x98, 0xfa, 0xc7, 0xae, 0xd4, 0x0e, 0x2c, 0x9e,
    <a id="L546"></a>0x38, 0x05, 0x9d, 0x52, 0x60, 0xa9, 0x99, 0x0a, 0x81, 0xb4, 0x98, 0x90, 0x1d,
    <a id="L547"></a>0xae, 0xbb, 0x4a, 0xd7, 0xb9, 0xdc, 0x88, 0x9e, 0x37, 0x78, 0x41, 0x5b, 0xf7,
    <a id="L548"></a>0x82, 0xa5, 0xf2, 0xba, 0x41, 0x25, 0x5a, 0x90, 0x1a, 0x1e, 0x45, 0x38, 0xa1,
    <a id="L549"></a>0x52, 0x58, 0x75, 0x94, 0x26, 0x44, 0xfb, 0x20, 0x07, 0xba, 0x44, 0xcc, 0xe5,
    <a id="L550"></a>0x4a, 0x2d, 0x72, 0x3f, 0x98, 0x47, 0xf6, 0x26, 0xdc, 0x05, 0x46, 0x05, 0x07,
    <a id="L551"></a>0x63, 0x21, 0xab, 0x46, 0x9b, 0x9c, 0x78, 0xd5, 0x54, 0x5b, 0x3d, 0x0c, 0x1e,
    <a id="L552"></a>0xc8, 0x64, 0x8c, 0xb5, 0x50, 0x23, 0x82, 0x6f, 0xdb, 0xb8, 0x22, 0x1c, 0x43,
    <a id="L553"></a>0x96, 0x07, 0xa8, 0xbb,
<a id="L554"></a>}
</pre>

</div>

<div id="footer">
<p>Except as noted, this content is
   licensed under <a href="http://creativecommons.org/licenses/by/3.0/">
   Creative Commons Attribution 3.0</a>.
</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-11222381-2");
pageTracker._trackPageview();
</script>
</body>
</html>
<!-- generated at Thu Nov 12 15:42:51 PST 2009 -->
