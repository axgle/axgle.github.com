<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/transitional.dtd">
<html>
<head>

  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Text file src/pkg/runtime/malloc.cgo</title>

  <link rel="stylesheet" type="text/css" href="../../../doc/style.css">
  <script type="text/javascript" src="../../../doc/godocs.js"></script>

</head>

<body>

  <script>
    // Catch 'enter' key down events and trigger the search form submission.
    function codesearchKeyDown(event) {
      if (event.which == 13) {
        var form = document.getElementById('codesearch');
        var query = document.getElementById('codesearchQuery');
        form.q.value = "lang:go package:go.googlecode.com " + query.value;
        document.getElementById('codesearch').submit();
}      return true;
}
    // Capture the submission event and construct the query parameter.
    function codeSearchSubmit() {
      var query = document.getElementById('codesearchQuery');
      var form = document.getElementById('codesearch');
      form.q.value = "lang:go package:go.googlecode.com " + query.value;
      return true;
}  </script>

<div id="topnav">
  <table summary="">
    <tr>
      <td id="headerImage">
        <a href="../../../index.html"><img src="../../../doc/logo-153x55.png" height="55" width="153" alt="Go Home Page" style="border:0" /></a>
      </td>
      <td>
        <div id="headerDocSetTitle">The Go Programming Language</div>
      </td>
      <td>
        <!-- <table>
          <tr>
            <td>
              <! The input box is outside of the form because we want to add
              a couple of restricts to the query before submitting. If we just
              add the restricts to the text box before submitting, then they
              appear in the box when the user presses 'back'. Thus we use a
              hidden field in the form. However, there's no way to stop the
              non-hidden text box from also submitting a value unless we move
              it outside of the form
              <input type="search" id="codesearchQuery" value="" size="30" onkeydown="return codesearchKeyDown(event);"/>
              <form method="GET" action="http://www.google.com/codesearch" id="codesearch" class="search" onsubmit="return codeSearchSubmit();" style="display:inline;">
                <input type="hidden" name="q" value=""/>
                <input type="submit" value="Code search" />
                <span style="color: red">(TODO: remove for now?)</span>
              </form>
            </td>
          </tr>
          <tr>
            <td>
              <span style="color: gray;">(e.g. &ldquo;pem&rdquo; or &ldquo;xml&rdquo;)</span>
            </td>
          </tr>
        </table> -->
      </td>
    </tr>
  </table>
</div>

<div id="linkList">
  <ul>
    <li class="navhead"><a href="../../../index.html">Home</a></li>

    <li class="blank">&nbsp;</li>
    <li class="navhead">Documents</li>
    <li><a href="../../../doc/go_tutorial.html">Tutorial</a></li>
    <li><a href="../../../doc/effective_go.html">Effective Go</a></li>
    <li><a href="../../../doc/go_faq.html">FAQ</a></li>
    <li><a href="../../../doc/go_lang_faq.html">Language Design FAQ</a></li>
    <li><a href="http://www.youtube.com/watch?v=rKnDgT73v8s">Tech talk (1 hour)</a> (<a href="../../../doc/go_talk-20091030.pdf">PDF</a>)</li>
    <li><a href="../../../doc/go_spec.html">Language Specification</a></li>
    <li><a href="../../../doc/go_mem.html">Memory Model</a></li>
    <li><a href="../../../doc/go_for_cpp_programmers.html">Go for C++ Programmers</a></li>

    <li class="blank">&nbsp;</li>
    <li class="navhead">How To</li>
    <li><a href="../../../doc/install.html">Install Go</a></li>
    <li><a href="../../../doc/contribute.html">Contribute code</a></li>

    <li class="blank">&nbsp;</li>
    <li class="navhead">Programming</li>
    <li><a href="../../../cmd/index.html">Command documentation</a></li>
    <li><a href="../../../pkg/index.html">Package documentation</a></li>
    <li><a href="../../index.html">Source files</a></li>

    <li class="blank">&nbsp;</li>
    <li class="navhead">Help</li>
    <li>#go-nuts on irc.freenode.net</li>
    <li><a href="http://groups.google.com/group/golang-nuts">Go Nuts mailing list</a></li>
    <li><a href="http://code.google.com/p/go/issues/list">Issue tracker</a></li>

    <li class="blank">&nbsp;</li>
    <li class="navhead">Go code search</li>
    <form method="GET" action="http://golang.org/search" class="search">
    <input type="search" name="q" value="" size="25" style="width:80%; max-width:200px" />
    <input type="submit" value="Go" />
    </form>

    <li class="blank">&nbsp;</li>
    <li class="navhead">Last update</li>
	<li>Thu Nov 12 15:59:05 PST 2009</li>
  </ul>
</div>

<div id="content">
  <h1 id="generatedHeader">Text file src/pkg/runtime/malloc.cgo</h1>

  <!-- The Table of Contents is automatically inserted in this <div>.
       Do not delete this <div>. -->
  <div id="nav"></div>

  <!-- Content is HTML-escaped elsewhere -->
  <pre>
// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// See malloc.h for overview.
//
// TODO(rsc): double-check stats.
// TODO(rsc): solve &#34;stack overflow during malloc&#34; problem.

package malloc
#include &#34;runtime.h&#34;
#include &#34;malloc.h&#34;
#include &#34;defs.h&#34;

MHeap mheap;
MStats mstats;

// Allocate an object of at least size bytes.
// Small objects are allocated from the per-thread cache&#39;s free lists.
// Large objects (&gt; 32 kB) are allocated straight from the heap.
void*
malloc(uintptr size)
{
	int32 sizeclass;
	MCache *c;
	uintptr npages;
	MSpan *s;
	void *v;
	uint32 *ref;

	if(m-&gt;mallocing)
		throw(&#34;malloc/free - deadlock&#34;);
	m-&gt;mallocing = 1;

	if(size == 0)
		size = 1;

	if(size &lt;= MaxSmallSize) {
		// Allocate from mcache free lists.
		sizeclass = SizeToClass(size);
		size = class_to_size[sizeclass];
		c = m-&gt;mcache;
		v = MCache_Alloc(c, sizeclass, size);
		if(v == nil)
			throw(&#34;out of memory&#34;);
		mstats.alloc += size;
	} else {
		// TODO(rsc): Report tracebacks for very large allocations.

		// Allocate directly from heap.
		npages = size &gt;&gt; PageShift;
		if((size &amp; PageMask) != 0)
			npages++;
		s = MHeap_Alloc(&amp;mheap, npages, 0);
		if(s == nil)
			throw(&#34;out of memory&#34;);
		mstats.alloc += npages&lt;&lt;PageShift;
		v = (void*)(s-&gt;start &lt;&lt; PageShift);
	}

	// setup for mark sweep
	if(!mlookup(v, nil, nil, &amp;ref)) {
		printf(&#34;malloc %D; mlookup failed\n&#34;, (uint64)size);
		throw(&#34;malloc mlookup&#34;);
	}
	*ref = RefNone;

	m-&gt;mallocing = 0;
	return v;
}

void*
mallocgc(uintptr size)
{
	void *v;

	v = malloc(size);
	if(mstats.inuse_pages &gt; mstats.next_gc)
		gc(0);
	return v;
}

// Free the object whose base pointer is v.
void
free(void *v)
{
	int32 sizeclass, size;
	uintptr page, tmp;
	MSpan *s;
	MCache *c;
	uint32 *ref;

	if(v == nil)
		return;

	if(m-&gt;mallocing)
		throw(&#34;malloc/free - deadlock&#34;);
	m-&gt;mallocing = 1;

	if(!mlookup(v, nil, nil, &amp;ref))
		throw(&#34;free mlookup&#34;);
	*ref = RefFree;

	// Find size class for v.
	page = (uintptr)v &gt;&gt; PageShift;
	sizeclass = MHeapMapCache_GET(&amp;mheap.mapcache, page, tmp);
	if(sizeclass == 0) {
		// Missed in cache.
		s = MHeap_Lookup(&amp;mheap, page);
		if(s == nil)
			throw(&#34;free - invalid pointer&#34;);
		sizeclass = s-&gt;sizeclass;
		if(sizeclass == 0) {
			// Large object.
			mstats.alloc -= s-&gt;npages&lt;&lt;PageShift;
			runtime_memclr(v, s-&gt;npages&lt;&lt;PageShift);
			MHeap_Free(&amp;mheap, s);
			goto out;
		}
		MHeapMapCache_SET(&amp;mheap.mapcache, page, sizeclass);
	}

	// Small object.
	c = m-&gt;mcache;
	size = class_to_size[sizeclass];
	runtime_memclr(v, size);
	mstats.alloc -= size;
	MCache_Free(c, v, sizeclass, size);

out:
	m-&gt;mallocing = 0;
}

int32
mlookup(void *v, byte **base, uintptr *size, uint32 **ref)
{
	uintptr n, nobj, i;
	byte *p;
	MSpan *s;

	s = MHeap_LookupMaybe(&amp;mheap, (uintptr)v&gt;&gt;PageShift);
	if(s == nil) {
		if(base)
			*base = nil;
		if(size)
			*size = 0;
		if(ref)
			*ref = 0;
		return 0;
	}

	p = (byte*)((uintptr)s-&gt;start&lt;&lt;PageShift);
	if(s-&gt;sizeclass == 0) {
		// Large object.
		if(base)
			*base = p;
		if(size)
			*size = s-&gt;npages&lt;&lt;PageShift;
		if(ref)
			*ref = &amp;s-&gt;gcref0;
		return 1;
	}

	if((byte*)v &gt;= (byte*)s-&gt;gcref) {
		// pointers into the gc ref counts
		// do not count as pointers.
		return 0;
	}

	n = class_to_size[s-&gt;sizeclass];
	i = ((byte*)v - p)/n;
	if(base)
		*base = p + i*n;
	if(size)
		*size = n;
	nobj = (s-&gt;npages &lt;&lt; PageShift) / (n + RefcountOverhead);
	if((byte*)s-&gt;gcref &lt; p || (byte*)(s-&gt;gcref+nobj) &gt; p+(s-&gt;npages&lt;&lt;PageShift)) {
		printf(&#34;odd span state=%d span=%p base=%p sizeclass=%d n=%D size=%D npages=%D\n&#34;,
			s-&gt;state, s, p, s-&gt;sizeclass, (uint64)nobj, (uint64)n, (uint64)s-&gt;npages);
		printf(&#34;s-&gt;base sizeclass %d v=%p base=%p gcref=%p blocksize=%D nobj=%D size=%D end=%p end=%p\n&#34;,
			s-&gt;sizeclass, v, p, s-&gt;gcref, (uint64)s-&gt;npages&lt;&lt;PageShift,
			(uint64)nobj, (uint64)n, s-&gt;gcref + nobj, p+(s-&gt;npages&lt;&lt;PageShift));
		throw(&#34;bad gcref&#34;);
	}
	if(ref)
		*ref = &amp;s-&gt;gcref[i];

	return 1;
}

MCache*
allocmcache(void)
{
	return FixAlloc_Alloc(&amp;mheap.cachealloc);
}

void
mallocinit(void)
{
	InitSizes();
	MHeap_Init(&amp;mheap, SysAlloc);
	m-&gt;mcache = allocmcache();

	// See if it works.
	free(malloc(1));
}

void*
SysAlloc(uintptr n)
{
	mstats.sys += n;
	return runtime_mmap(nil, n, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_ANON|MAP_PRIVATE, -1, 0);
}

void
SysUnused(void *v, uintptr n)
{
	USED(v);
	USED(n);
	// TODO(rsc): call madvise MADV_DONTNEED
}

void
SysFree(void *v, uintptr n)
{
	USED(v);
	USED(n);
	// TODO(rsc): call munmap
}

// Runtime stubs.

extern void *oldmal(uint32);

void*
mal(uint32 n)
{
//return oldmal(n);
	void *v;

	v = mallocgc(n);

	if(0) {
		byte *p;
		uint32 i;
		p = v;
		for(i=0; i&lt;n; i++) {
			if(p[i] != 0) {
				printf(&#34;mal %d =&gt; %p: byte %d is non-zero\n&#34;, n, v, i);
				throw(&#34;mal&#34;);
			}
		}
	}

//printf(&#34;mal %d %p\n&#34;, n, v);  // |checkmal to check for overlapping returns.
	return v;
}

// Stack allocator uses malloc/free most of the time,
// but if we&#39;re in the middle of malloc and need stack,
// we have to do something else to avoid deadlock.
// In that case, we fall back on a fixed-size free-list
// allocator, assuming that inside malloc all the stack
// frames are small, so that all the stack allocations
// will be a single size, the minimum (right now, 5k).
struct {
	Lock;
	FixAlloc;
} stacks;

void*
stackalloc(uint32 n)
{
	void *v;
	uint32 *ref;

//return oldmal(n);
	if(m-&gt;mallocing || m-&gt;gcing) {
		lock(&amp;stacks);
		if(stacks.size == 0)
			FixAlloc_Init(&amp;stacks, n, SysAlloc, nil, nil);
		if(stacks.size != n) {
			printf(&#34;stackalloc: in malloc, size=%D want %d&#34;, (uint64)stacks.size, n);
			throw(&#34;stackalloc&#34;);
		}
		v = FixAlloc_Alloc(&amp;stacks);
		unlock(&amp;stacks);
		return v;
	}
	v = malloc(n);
	if(!mlookup(v, nil, nil, &amp;ref))
		throw(&#34;stackalloc mlookup&#34;);
	*ref = RefStack;
	return v;
}

void
stackfree(void *v)
{
//return;

	if(m-&gt;mallocing || m-&gt;gcing) {
		lock(&amp;stacks);
		FixAlloc_Free(&amp;stacks, v);
		unlock(&amp;stacks);
		return;
	}
	free(v);
}

func Alloc(n uintptr) (p *byte) {
	p = malloc(n);
}

func Free(p *byte) {
	free(p);
}

func Lookup(p *byte) (base *byte, size uintptr) {
	mlookup(p, &amp;base, &amp;size, nil);
}

func GetStats() (s *MStats) {
	s = &amp;mstats;
}

func GC() {
	gc(1);
}
</pre>

</div>

<div id="footer">
<p>Except as noted, this content is
   licensed under <a href="http://creativecommons.org/licenses/by/3.0/">
   Creative Commons Attribution 3.0</a>.
</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-11222381-2");
pageTracker._trackPageview();
</script>
</body>
</html>
<!-- generated at Thu Nov 12 15:42:51 PST 2009 -->
